'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _http = require('http');

var _child_process = require('child_process');

var _constants = require('./constants');

var C = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function getPackageData(encodedPackageName) {
  return new Promise(function (resolve, reject) {
    // JSON data about a package is available at https://registry.npmjs.com/<package-name>
    var req = (0, _http.request)({
      protocol: 'http:',
      hostname: 'registry.npmjs.com',
      path: '/' + encodedPackageName
    }, function (res) {
      if (res.statusCode === 404) {
        return reject(new Error('That package doesn\'t exist. Please try another.'));
      }
      // If it's not 200 or 404, something must
      // have gone wrong with the connection
      if (res.statusCode !== 200) {
        return reject(new Error('There was a problem connecting to the registry.'));
      }
      res.setEncoding('utf8');
      var rawData = '';
      res.on('data', function (chunk) {
        rawData += chunk;
      });
      res.on('end', function () {
        try {
          var parsedData = JSON.parse(rawData);
          return resolve(parsedData);
        } catch (err) {
          return reject(err);
        }
      });
    });
    req.on('error', function (err) {
      return reject(err);
    });
    // req.end() must be called with http.request
    req.end();
  });
}

// Function to spawn the install process,
// returns a Promise
/* eslint-disable no-param-reassign, no-shadow, consistent-return */

function spawnInstall(command, args) {
  return new Promise(function (resolve, reject) {
    // Spawn install process
    var installProcess = (0, _child_process.spawn)(command, args, {
      cwd: process.cwd(),
      // Something to do with this, progress bar only shows if stdio is inherit
      // https://github.com/yarnpkg/yarn/issues/2200
      stdio: 'inherit'
    });
    installProcess.on('error', function (err) {
      return reject(err);
    });
    installProcess.on('close', function (code) {
      if (code !== 0) {
        return reject(new Error('The install process exited with error code ' + code + '.'));
      }
      return resolve();
    });
  });
}

function installPeerDeps(_ref, cb) {
  var packageName = _ref.packageName,
      version = _ref.version,
      packageManager = _ref.packageManager,
      dev = _ref.dev,
      silent = _ref.silent;

  // Thanks https://github.com/unpkg/npm-http-server/blob/master/modules/RegistryUtils.js
  // for scoped modules help
  var encodedPackageName = void 0;
  if (packageName[0] === '@') {
    // For the registry URL, the @ doesn't get URL encoded for some reason
    encodedPackageName = '@' + encodeURIComponent(packageName.substring(1));
  } else {
    encodedPackageName = encodeURIComponent(packageName);
  }

  getPackageData(encodedPackageName)
  // Catch before .then because the .then is so long
  .catch(function (err) {
    return cb(err);
  }).then(function (data) {
    var versions = Object.keys(data.versions);
    // If it's not a valid version, maybe it's a tag
    if (versions.indexOf(version) === -1) {
      var tags = Object.keys(data['dist-tags']);
      //  If it's not a valid tag, throw an error
      if (tags.indexOf(version) === -1) {
        return cb(new Error('That version or tag does not exist.'));
      }
      // If the tag is valid, then find the version corresponding to the tag
      version = data['dist-tags'][version];
    }

    // Get peer dependencies for current version
    var peerDepsVersionMap = data.versions[version].peerDependencies;

    if (typeof peerDepsVersionMap === 'undefined') {
      cb(new Error('The package you are trying to install has no peer dependencies. Use yarn or npm to install it manually.'));
    }

    // Construct packages string with correct versions for install
    var packagesString = '' + packageName;
    Object.keys(peerDepsVersionMap).forEach(function (depName) {
      var range = peerDepsVersionMap[depName];
      // Semver ranges can have a join of comparator sets
      // e.g. '^3.0.2 || ^4.0.0' or '>=1.2.7 <1.3.0'
      // We just take the last comparator in the set
      var rangeSplit = range.split(' ');
      var lastComparator = rangeSplit[rangeSplit.length - 1];
      packagesString += ' ' + depName + '@' + lastComparator;
    });
    // Construct command based on package manager of current project
    var subcommand = packageManager === C.yarn ? 'add' : 'install';
    var devFlag = packageManager === C.yarn ? '--dev' : '--save-dev';
    if (!dev) {
      devFlag = '';
    }
    var isWindows = process.platform === 'win32';
    var extra = '';
    if (isWindows) {
      // Spawn doesn't work without this extra stuff in Windows
      // See https://github.com/nodejs/node/issues/3675
      extra = '.cmd';
    }

    var args = [];
    // I know I can push it, but I'll just
    // keep concatenating for consistency
    args = args.concat(subcommand);
    // If we have spaces in our args spawn()
    // cries foul so we'll split the packagesString
    // into an array of individual packages
    args = args.concat(packagesString.split(' '));
    // If devFlag is empty, then we'd be adding an empty arg
    // That causes the command to fail
    if (devFlag !== '') {
      args = args.concat(devFlag);
    }
    // If we're using NPM, and there's no dev flag,
    // and it's not a silent install make sure to save
    // deps in package.json under "dependencies"
    if (devFlag === '' && packageManager === C.npm && !silent) {
      args = args.concat('--save');
    }

    //  Show user the command that's running
    console.log('Installing peerdeps for ' + packageName + '@' + version + '.');
    console.log(packageManager + ' ' + args.join(' ') + '\n');
    spawnInstall(packageManager + extra, args).then(function () {
      return cb(null);
    }).catch(function (err) {
      return cb(err);
    });
  });
}

exports.default = installPeerDeps;
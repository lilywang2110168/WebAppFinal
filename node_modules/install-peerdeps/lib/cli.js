#!/usr/bin/env node
'use strict';

var _commander = require('commander');

var _promptly = require('promptly');

var _hasYarn = require('has-yarn');

var _hasYarn2 = _interopRequireDefault(_hasYarn);

var _cliColor = require('cli-color');

var _cliColor2 = _interopRequireDefault(_cliColor);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _installPeerDeps = require('./installPeerDeps');

var _installPeerDeps2 = _interopRequireDefault(_installPeerDeps);

var _constants = require('./constants');

var C = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Create program object
var program = new _commander.Command('install-peerdeps');

// Create prefixes for error/sucess events
var errorText = _cliColor2.default.red.bold('ERR');
var successText = _cliColor2.default.green.bold('SUCCESS');

// Get relevant package information
var name = _package2.default.name;
var version = _package2.default.version;

// This is used a couple of times, so just putting
// it into a function so I don't have to copy it like
// 3 times
function printPackageFormatError() {
  console.log(errorText + ' Please specify the package to install with peerDeps in the form of `package` or `package@n.n.n`');
  console.log(errorText + ' At this time you must provide the full semver version of the package.');
  console.log(errorText + ' Alternatively, omit it to automatically install the latest version of the package.');
}

// Create program
program.version(version).description('Installs the specified package along with correct peerDeps.').option('-d, --dev', 'Install the package as a devDependency').option('-S, --silent', 'If using npm, don\'t save in package.json').option('-Y, --yarn', 'Install with yarn').usage('<package>[@<version>], default version is \'latest\'').parse(process.argv);

// Print program name and version (like what Yarn does)
console.log(_cliColor2.default.bold(name + ' v' + version));

// Make sure we're only installing no more than one package
if (program.args.length > 1) {
  console.log(errorText + ' Please specify only one package at a time to install with peerDeps.');
  process.exit(1);
}

// Make sure we're installing at least one package
if (program.args.length === 0) {
  console.log(errorText + ' Please specify a package to install with peerDeps.');
  program.help();
  process.exit(1);
}

// The first argument after the options is the name of the package
var packageString = program.args[0];

// Capturing groups are the package name,
// package version with @,
// and bare package version
// eslint-disable-next-line no-useless-escape
var parsed = packageString.match(/^@?([\/\w-]+)(@([\d\.\w]+))?$/);

// Get actual package name, account for @ sign
// (like @angular/core)
var packageName = void 0;
if (packageString[0] === '@') {
  packageName = '@' + parsed[1];
} else {
  packageName = parsed[1];
}

// Get package version, 2nd capturing group
// includes the @ sign so we get the third
var packageVersion = parsed[3];

// If we can't get a package name out,
// print the format error
if (!packageName) {
  printPackageFormatError();
  process.exit(1);
}

// Default package manager is npm
var packageManager = C.npm;
// If the yarn option was specified, use yarn
if (program.yarn) {
  packageManager = C.yarn;
}

if (program.yarn && program.silent) {
  console.log(errorText + ' Option --silent cannot be used with --yarn.');
  process.exit(1);
}

// Dev option can't be used with silent,
// since --dev means it should be saved
// as a devDependency
if (program.dev && program.silent) {
  console.log(errorText + ' Option --silent cannot be used with --dev.');
  process.exit(1);
}

// Define options object to pass to
// the actual install function
var options = {
  packageName: packageName,
  version: packageVersion || 'latest',
  dev: program.dev,
  silent: program.silent,
  packageManager: packageManager
};

// Disabled this rule so we can hoist the callback
/* eslint-disable no-use-before-define */

// Check if the user has Yarn but didn't specify the Yarn option
// However, don't show prompt if user wants to install silently
if ((0, _hasYarn2.default)() && packageManager !== C.yarn && !program.silent) {
  // If they do, ask if they want to use Yarn
  (0, _promptly.confirm)('It seems as if you are using Yarn. Would you like to use Yarn for the installation? (y/n)', function (err, value) {
    if (err) {
      console.log(errorText + ' ' + err.message);
      process.exit(1);
    }
    // Value is true or false; if true, they want to use Yarn
    if (value) {
      packageManager = C.yarn;
    }
    // Now install, but with the new packageManager
    (0, _installPeerDeps2.default)(Object.assign({}, options, {
      packageManager: packageManager
    }), installCb);
  });
} else {
  // If they don't have Yarn or they've already
  // opted to use Yarn, go ahead and install
  (0, _installPeerDeps2.default)(options, installCb);
}

function installCb(err) {
  if (err) {
    console.log(errorText + ' ' + err.message);
    process.exit(1);
  }
  console.log(successText + ' ' + packageName + ' and its peerDeps were installed successfully.');
  process.exit(0);
}
/* eslint-enable */